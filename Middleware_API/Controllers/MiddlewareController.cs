using Microsoft.AspNetCore.Mvc;
using Korvesto.Shared.Models;
using System.Net.Http;
using System.Text.Json;

namespace Middleware_API.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class MiddlewareController : ControllerBase
    {
        private readonly HttpClient _posHttpClient;
        private readonly HttpClient _warehouseHttpClient;
        private readonly HttpClient _crmHttpClient;
        private readonly ILogger<MiddlewareController> _logger;
        private static List<ActivityLog> _activityLogs = new();

        public MiddlewareController(IHttpClientFactory httpClientFactory, ILogger<MiddlewareController> logger)
        {
            _posHttpClient = httpClientFactory.CreateClient("POSApi");
            _warehouseHttpClient = httpClientFactory.CreateClient("WarehouseApi");
            _crmHttpClient = httpClientFactory.CreateClient("CRMApi");
            _logger = logger;
        }

        [HttpGet("logs")]
        public IActionResult GetActivityLogs()
        {
            return Ok(_activityLogs);
        }

        [HttpPost("process-sale")]
        public async Task<IActionResult> ProcessSale([FromBody] Sale sale)
        {
            if (sale == null)
            {
                LogActivity("Error", "Sale processing failed", "No sale data provided");
                return BadRequest("Sale data is required");
            }

            LogActivity("Info", "Processing new sale", $"Sale ID: {sale.Id ?? "(new)"}, Customer: {sale.CustomerId}");
            var results = new List<string>();

            try
            {
                // 1. Record Sale in POS API
                var posContent = new StringContent(JsonSerializer.Serialize(sale), System.Text.Encoding.UTF8, "application/json");
                var posResponse = await _posHttpClient.PostAsync("api/sales", posContent);

                if (posResponse.IsSuccessStatusCode)
                {
                    var posResult = await posResponse.Content.ReadAsStringAsync();
                    var recordedSale = JsonSerializer.Deserialize<Sale>(posResult, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    sale.Id = recordedSale.Id; // Update sale ID if it was generated by POS
                    LogActivity("Info", "Sale recorded in POS", $"Sale ID: {sale.Id}");
                    results.Add($"POS: Sale recorded - ID {sale.Id}");
                }
                else
                {
                    var errorContent = await posResponse.Content.ReadAsStringAsync();
                    LogActivity("Error", "Failed to record sale in POS", errorContent);
                    results.Add($"POS: Failed ({posResponse.StatusCode}) - {errorContent}");
                    return StatusCode((int)posResponse.StatusCode, new { message = "Failed to record sale in POS", details = results });
                }

                // 2. Deduct Stock from Warehouse API
                foreach (var item in sale.Items)
                {
                    var stockAdjustment = new StockAdjustment
                    {
                        ProductId = item.ProductId,
                        Quantity = -item.Quantity, // Deduct
                        Location = "POS", // Example location
                        Reason = $"Sale {sale.Id}"
                    };
                    var warehouseContent = new StringContent(JsonSerializer.Serialize(stockAdjustment), System.Text.Encoding.UTF8, "application/json");
                    var warehouseResponse = await _warehouseHttpClient.PostAsync("api/stock/adjust", warehouseContent);

                    if (warehouseResponse.IsSuccessStatusCode)
                    {
                        var warehouseResult = await warehouseResponse.Content.ReadAsStringAsync();
                        LogActivity("Info", "Stock deducted", $"Product: {item.ProductId}, Quantity: {item.Quantity}, Result: {warehouseResult}");
                        results.Add($"Warehouse: Stock deducted for {item.ProductId} ({item.Quantity})");
                    }
                    else
                    {
                        var errorContent = await warehouseResponse.Content.ReadAsStringAsync();
                        LogActivity("Error", "Stock deduction failed", $"Product: {item.ProductId}, Error: {errorContent}");
                        results.Add($"Warehouse: Failed to deduct stock for {item.ProductId} ({warehouseResponse.StatusCode}) - {errorContent}");
                    }
                }

                // 3. Add Loyalty Points in CRM API (if CustomerId exists)
                if (!string.IsNullOrEmpty(sale.CustomerId))
                {
                    var loyaltyTransaction = new LoyaltyTransaction
                    {
                        CustomerId = sale.CustomerId,
                        Points = (int)(sale.TotalAmount / 10), // Example: 1 point per $10 spent
                        Description = $"Earned from sale {sale.Id}"
                    };
                    var crmContent = new StringContent(JsonSerializer.Serialize(loyaltyTransaction), System.Text.Encoding.UTF8, "application/json");
                    var crmResponse = await _crmHttpClient.PostAsync($"api/loyalty/{sale.CustomerId}/points", crmContent);

                    if (crmResponse.IsSuccessStatusCode)
                    {
                        var crmResult = await crmResponse.Content.ReadAsStringAsync();
                        LogActivity("Info", "Loyalty points added", $"Customer: {sale.CustomerId}, Result: {crmResult}");
                        results.Add($"CRM: Loyalty points added for {sale.CustomerId}");
                    }
                    else
                    {
                        var errorContent = await crmResponse.Content.ReadAsStringAsync();
                        LogActivity("Error", "Loyalty points failed", $"Customer: {sale.CustomerId}, Error: {errorContent}");
                        results.Add($"CRM: Failed to add points for customer {sale.CustomerId} ({crmResponse.StatusCode}) - {errorContent}");
                    }
                }
                else
                {
                    LogActivity("Warning", "Loyalty points skipped", "No CustomerId provided for sale");
                    results.Add("CRM: Loyalty points skipped (no CustomerId)");
                }

                LogActivity("Info", "Sale processed successfully", $"Sale ID: {sale.Id}");
                return Ok(new { message = "Sale processed successfully", saleId = sale.Id, details = results });
            }
            catch (Exception ex)
            {
                LogActivity("Error", "Sale processing error", ex.Message);
                return StatusCode(500, $"Error processing sale: {ex.Message}");
            }
        }

        private void LogActivity(string level, string action, string details)
        {
            var log = new ActivityLog
            {
                Timestamp = DateTime.UtcNow,
                Level = level,
                Action = action,
                Details = details
            };
            _activityLogs.Add(log);
        }
    }

    public class ActivityLog
    {
        public DateTime Timestamp { get; set; }
        public string Level { get; set; }  // Info, Warning, Error
        public string Action { get; set; } // What happened
        public string Details { get; set; } // Additional information
    }
} 